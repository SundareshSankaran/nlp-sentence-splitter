{"creationTimeStamp":"2023-09-15T01:16:27.716Z","modifiedTimeStamp":"2023-09-16T03:43:14.191Z","createdBy":"viya_admin","modifiedBy":"viya_admin","name":"NLP - Sentence Splitter.step","displayName":"NLP - Sentence Splitter.step","localDisplayName":"NLP - Sentence Splitter.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/04abd872-a1ba-42c9-9a98-32f626955477","uri":"/dataFlows/steps/04abd872-a1ba-42c9-9a98-32f626955477","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/04abd872-a1ba-42c9-9a98-32f626955477","uri":"/dataFlows/steps/04abd872-a1ba-42c9-9a98-32f626955477","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/04abd872-a1ba-42c9-9a98-32f626955477","uri":"/dataFlows/steps/04abd872-a1ba-42c9-9a98-32f626955477","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/04abd872-a1ba-42c9-9a98-32f626955477","uri":"/dataFlows/steps/04abd872-a1ba-42c9-9a98-32f626955477"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/04abd872-a1ba-42c9-9a98-32f626955477","uri":"/dataFlows/steps/04abd872-a1ba-42c9-9a98-32f626955477","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/04abd872-a1ba-42c9-9a98-32f626955477","uri":"/dataFlows/steps/04abd872-a1ba-42c9-9a98-32f626955477","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[{"name":"inputtable","displayName":"inputtable","localDisplayName":"inputtable","minEntries":1,"maxEntries":1,"defaultEntries":0,"type":"table"}],"outputPorts":[{"name":"outputtable","displayName":"outputtable","localDisplayName":"outputtable","minEntries":1,"maxEntries":1,"defaultEntries":0,"type":"table","supportsView":false,"requiresStructure":false}]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"_nlp_ss_params\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Parameters\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"inputtable\",\n\t\t\t\t\t\"type\": \"inputtable\",\n\t\t\t\t\t\"label\": \"Input table:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"language\",\n\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\"label\": \"Select language (English is the default):\",\n\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Arabic\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Chinese\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Croatian\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Czech\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Danish\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Dutch\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"English\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Farsi\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"French\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Finnish\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"German\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Greek\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Hebrew\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Hindi\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Hungarian\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Indonesian\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Italian\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Japanese\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Kazakh\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Korean\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Norwegian\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Polish\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Portuguese\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Romanian\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Russian\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Spanish\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Slovak\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Slovene\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Swedish\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Tagalog\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Thai\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Turkish\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"Vietnamese\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"docId\",\n\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\"label\": \"Select document ID column:\",\n\t\t\t\t\t\"order\": false,\n\t\t\t\t\t\"columntype\": \"a\",\n\t\t\t\t\t\"max\": 1,\n\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"table\": \"inputtable\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"textVar\",\n\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\"label\": \"Provide text column:\",\n\t\t\t\t\t\"order\": false,\n\t\t\t\t\t\"columntype\": \"c\",\n\t\t\t\t\t\"max\": 1,\n\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"table\": \"inputtable\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"outputtable\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Output table:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"_nlp_ss_about\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text_description\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Sentence Splitter\\n============\\n\\nThe \\\"Sentence Splitter\\\" custom step, as its name implies, splits a text column into multiple observations with constituent sentences, to enable further desired operations downstream.\\n\\nSentence-level analysis can improve Natural Language Processing (NLP) quality in some cases.  It aids feature-level sentiment analysis, early reads, data cleansing, and summarization. For large documents, sentence-level analysis can also be more efficient than analysing the document as a whole.\\n\\nConsider this as part of your preprocessing pipeline prior to model development.\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_parameters\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Parameters\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"parameters_text\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"This custom step runs on data loaded to a SAS Cloud Analytics Services (CAS) library (known as a caslib). Ensure you are connected to CAS before running this step.\\n\\nThis custom step also requires a SAS Visual Text Analytics (VTA) license in order to run a sentence extraction model.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"parameters_input\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Input Parameters\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"input_parameters_text\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"1. Input table containing a text column (input port, required)\\n\\n2. Language (drop-down list, default English): choose from the 33 languages supported by VTA.\\n\\n3. Document ID column (column selector, required): select a column from the input table which acts as the unique identifier for the observation.\\n\\n4. Text column (column selector, required): self-explanatory\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"parameters_output_specs\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Output Specifications\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"output_parameters_text\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"- Output table (output port, required): attach a table to capture results at a sentence level.  \\n   - In addition to each sentence, the output table will also contain a new observation ID (Obs_ID) which combines the original document ID with the sentence ID.\\n   - The sentence ID is also recalculated to be in sync with its position in the original document.\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_runtimecontrol\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Run-time Control\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"runtimecontrol_text\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Note: Run-time control is optional.  You may choose whether to execute the main code of this step or not, based on upstream conditions set by earlier SAS programs.  This includes nodes run prior to this custom step earlier in a SAS Studio Flow, or a previous program in the same session.\\n\\nRefer this blog (https://communities.sas.com/t5/SAS-Communities-Library/Switch-on-switch-off-run-time-control-of-SAS-Studio-Custom-Steps/ta-p/885526) for more details on the concept.\\n\\nThe following macro variable,\\n\\n_ss_run_trigger\\n\\nwill initialize with a value of 1 by default, indicating an \\\"enabled\\\" status and allowing the custom step to run.\\n\\nIf you wish to control execution of this custom step, include code in an upstream SAS program to set this variable to 0.  This \\\"disables\\\" execution of the custom step.\\n\\nTo \\\"disable\\\" this step, run the following code upstream:\\n\\n%global _ss_run_trigger;\\n%let _ss_run_trigger =0;\\n\\nTo \\\"enable\\\" this step again, run the following (it's assumed that this has already been set as a global variable):\\n\\n%let _ss_run_trigger =1;\\n\\nIMPORTANT: Be aware that disabling this step means that none of its main execution code will run, and any  downstream code which was dependent on this code may fail.  Change this setting only if it aligns with the objective of your SAS Studio program.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_documentation\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Documentation\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"documentation_text\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"1. This custom step borrows from the following example in SAS documentation: https://go.documentation.sas.com/doc/en/pgmsascdc/default/casvtapg/n104aqxy69w3phn13njmc3dn3own.htm\\n\\n2. Blog by Emily Gao, with an example: https://blogs.sas.com/content/sgf/2018/07/26/how-to-tokenize-documents-into-sentences/\\n\\n3. SAS Documentation for the textRuleDevelop.compileConcept and textRuleDevelop.validateConcept actions (located in nearby section): https://go.documentation.sas.com/doc/en/pgmsascdc/default/casvtapg/cas-textruledevelop-compileconcept.htm\\n\\n4. SAS Documentation for the textRuleScore.applyConcept action: https://go.documentation.sas.com/doc/en/pgmsascdc/default/casvtapg/cas-textrulescore-applyconcept.htm\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"change_log_text\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Version: 1.0  (15SEP2023)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"contact_text\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Created/contact: \\n\\n- Sundaresh Sankaran (sundaresh.sankaran@sas.com)\\n\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"inputtable\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"language\": {\n\t\t\t\"value\": \"English\"\n\t\t},\n\t\t\"docId\": [],\n\t\t\"textVar\": [],\n\t\t\"outputtable\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t}\n\t},\n\t\"columnExclusions\": [\n\t\t[\n\t\t\t\"textVar\",\n\t\t\t\"docId\"\n\t\t]\n\t]\n}","templates":{"SAS":"/* SAS templated code goes here */\n/*-----------------------------------------------------------------------------------------*\n   START MACRO DEFINITIONS.\n*------------------------------------------------------------------------------------------*/\n\n/* -----------------------------------------------------------------------------------------* \n   Error flag for capture during code execution.\n*------------------------------------------------------------------------------------------ */\n\n%global _ss_error_flag;\n%let _ss_error_flag=0;\n\n/* -----------------------------------------------------------------------------------------* \n   Global macro variable for the trigger to run this custom step. A value of 1 \n   (the default) enables this custom step to run.  A value of 0 (provided by upstream code)\n   sets this to disabled.\n*------------------------------------------------------------------------------------------ */\n\n%global _ss_run_trigger;\n\n%if %sysevalf(%superq(_ss_run_trigger)=, boolean)  %then %do;\n\n\t%put NOTE: Trigger macro variable _ss_run_trigger does not exist. Creating it now.;\n    %let _ss_run_trigger=1;\n\n%end;\n\n/*-----------------------------------------------------------------------------------------*\n   Macro variable to capture indicator of a currently active CAS session\n*------------------------------------------------------------------------------------------*/\n\n%global casSessionExists;\n%global _current_uuid_;\n\n/*-----------------------------------------------------------------------------------------*\n   Macro to capture indicator and UUIDof any currently active CAS session.\n   UUID is not expensive and can be used in future to consider graceful reconnect.\n*------------------------------------------------------------------------------------------*/\n\n%macro _ss_checkSession;\n   %if %sysfunc(symexist(_SESSREF_)) %then %do;\n      %let casSessionExists= %sysfunc(sessfound(&_SESSREF_.));\n      %if &casSessionExists.=1 %then %do;\n         proc cas;\n            session.sessionId result = sessresults;\n            call symputx(\"_current_uuid_\", sessresults[1]);\n            %put NOTE: A CAS session &_SESSREF_. is currently active with UUID &_current_uuid_. ;\n         quit;\n      %end;\n   %end;\n%mend _ss_checkSession;\n\n/*-----------------------------------------------------------------------------------------*\n   This macro creates a global macro variable called _usr_nameCaslib\n   that contains the caslib name (aka. caslib-reference-name) associated with the libname \n   and assumes that the libname is using the CAS engine.\n\n   As sysvalue has a length of 1024 chars, we use the trimmed option in proc sql\n   to remove leading and trailing blanks in the caslib name.\n*------------------------------------------------------------------------------------------*/\n\n%macro _usr_getNameCaslib(_usr_LibrefUsingCasEngine); \n\n   %global _usr_nameCaslib;\n   %let _usr_nameCaslib=;\n\n   proc sql noprint;\n      select sysvalue into :_usr_nameCaslib trimmed from dictionary.libnames\n      where libname = upcase(\"&_usr_LibrefUsingCasEngine.\") and upcase(sysname)=\"CASLIB\";\n   quit;\n\n%mend _usr_getNameCaslib;\n\n\n/*-----------------------------------------------------------------------------------------*\n   Macro for Sentence splitter model definition: creates and compiles an information \n   extraction (concepts) model which splits text input into constituent sentences.\n*------------------------------------------------------------------------------------------*/\n\n%macro _ss_splitter_model;\n\n   data public.concept_rule;                                    \n      length rule $200.;\n      ruleId=1;\n      rule='ENABLE:SentBoundaries';\n      output;\n      ruleId=2;\n      rule='PREDICATE_RULE:SentBoundaries(first,last):(SENT, (SENTSTART_1, \"_first{_w}\"), (SENTEND_1, \"_last{_w}\"))';\n      output;\n   run;\n\n%mend _ss_splitter_model;\n\n\n\n/*-----------------------------------------------------------------------------------------*\n   EXECUTION CODE MACRO \n*------------------------------------------------------------------------------------------*/\n\n%macro main_execution_code;\n\n/*-----------------------------------------------------------------------------------------*\n   Check for an active CAS session\n*------------------------------------------------------------------------------------------*/\n\n   %_ss_checkSession;\n\n   %if &casSessionExists. = 0 %then %do;\n      %put ERROR: A CAS session does not exist. Start a CAS session upstream. ;\n      %let _ss_error_flag = 1;\n   %end;\n   %else %do;\n\n/*-----------------------------------------------------------------------------------------*\n   The PUBLIC caslib is required to stage the temp sentence splittermodel.  Check if there \n   exists a valid caslib which the PUBLIC libref points to.\n*------------------------------------------------------------------------------------------*/\n\n      %if &_ss_error_flag. = 0 %then %do;\n         %_usr_getNameCaslib(PUBLIC);\n\n         %if %sysfunc(upcase(\"&_usr_nameCaslib.\")) = \"PUBLIC\" %then %do;\n            %put NOTE: PUBLIC caslib is available.;\n            %let _usr_nameCaslib=;\n         %end;\n         %else %do;\n            %let _ss_error_flag=1;\n            %put ERROR: The PUBLIC Caslib is not available.  Assign the caslib ;\n         %end;\n      %end;\n\n/*-----------------------------------------------------------------------------------------*\n   Check Input libref to ensure it points to a valid caslib.\n*------------------------------------------------------------------------------------------*/\n\n      %if &_ss_error_flag. = 0 %then %do;\n\n         %global inputCaslib;\n   \n         %_usr_getNameCaslib(&inputtable_lib.);\n         %let inputCaslib=&_usr_nameCaslib.;\n         %put NOTE: &inputCaslib. is the input caslib.;\n         %let _usr_nameCaslib=;\n\n         %if \"&inputCaslib.\" = \"\" %then %do;\n            %put ERROR: Input table caslib is blank. Check if Input table is a valid CAS table. ;\n            %let _ss_error_flag=1;\n         %end;\n\n      %end;\n\n/*-----------------------------------------------------------------------------------------*\n   Check Output libref to ensure it points to a valid caslib.\n*------------------------------------------------------------------------------------------*/\n\n      %if &_ss_error_flag. = 0 %then %do;\n\n         %global outputCaslib;\n   \n         %_usr_getNameCaslib(&outputtable_lib.);\n         %let outputCaslib=&_usr_nameCaslib.;\n         %put NOTE: &outputCaslib. is the output caslib.;\n         %let _usr_nameCaslib=;\n\n         %if \"&outputCaslib.\" = \"\" %then %do;\n            %put ERROR: Output table caslib is blank. Check if Output table is a valid CAS table. ;\n            %let _ss_error_flag=1;\n         %end;\n\n      %end;\n\n\n      %if &_ss_error_flag. = 0 %then %do;\n\n/*-----------------------------------------------------------------------------------------*\n   Define the splitter model.\n*------------------------------------------------------------------------------------------*/\n\n         %_ss_splitter_model;\n \n         proc cas;         \n\n/*-----------------------------------------------------------------------------------------*\n   Obtain inputs from UI.\n*------------------------------------------------------------------------------------------*/\n\n            outputTableName = symget(\"outputtable_name_base\");\n            outputTableLib  = symget(\"outputCaslib\");\n            inputTableName  = symget(\"inputtable_name_base\");\n            inputTableLib   = symget(\"inputCaslib\");\n            docIdVar        = symget(\"docId\");\n            textVar         = symget(\"textVar\");\n            language        = symget(\"language\");\n \n/*-----------------------------------------------------------------------------------------*\n   Validate model syntax.\n*------------------------------------------------------------------------------------------*/\n   \n            textRuleDevelop.validateConcept result=validationResults /\n               table    = {name=\"concept_rule\", caslib=\"PUBLIC\"},\n               config   = \"rule\",\n               ruleId   = \"ruleId\",\n               language = language,\n               casOut   = {name=\"outValidation\",caslib=\"PUBLIC\", replace=True}\n             ;\n\n            validationErrors = validationResults[1][1][\"Rows\"];\n\n            if validationErrors = 0 then do;\n\n/*-----------------------------------------------------------------------------------------*\n   Compile model.\n*------------------------------------------------------------------------------------------*/\n \n               textRuleDevelop.compileConcept /\n                  table            = {name=\"concept_rule\", caslib=\"PUBLIC\"},\n                  config           = \"rule\",\n                  ruleId           = \"ruleId\",\n                  enablePredefined = false,\n                  language         = language,\n                  casOut           = {name=\"sentencesplitter\", caslib=\"PUBLIC\", replace=TRUE}\n               ;     \n\n/*-----------------------------------------------------------------------------------------*\n   Score text to obtain sentences.\n*------------------------------------------------------------------------------------------*/\n\n               textRuleScore.applyConcept /\n                  table     = {name=inputTableName, caslib=inputTableLib, where=textVar||\" ne ''\" },\n                  docId     = docIdVar,\n                  text      = textVar,\n                  language  = language,\n                  model     = {name=\"sentencesplitter\", caslib=\"PUBLIC\"},\n                  matchType = \"best\",\n                  casOut    = {name=\"tempconcept\",caslib=\"PUBLIC\", replace=TRUE},\n                  factOut   = {name=outputTableName, caslib=outputTableLib, replace=TRUE, where=\"_fact_argument_=''\"}\n               ;\n\n            end;\n/*-----------------------------------------------------------------------------------------*\n   Model validation is unlikely to error for a statically defined model, but good practice.\n*------------------------------------------------------------------------------------------*/\n\n            else do;\n\n               put \"ERROR: Check Model Validation Table\";\n\n            end;\n\n         quit;\n\n/*-----------------------------------------------------------------------------------------*\n   FUTURE PLACEHOLDER: The below step has potential for some refactoring with CASL \n   in future. \n   Fact result IDs, through a perhaps lovable quirk of the applyConcept action, are ordered\n   in descending order, giving a _result_id_ of 1 to the last occurrence of a sentence, \n   rather than the first.  This data step corrects the same and also generates an overall\n   Observation ID which combines the original DocID and Sentence ID.\n*------------------------------------------------------------------------------------------*/\n         data &outputtable.;\n            length Obs_ID $40. total_sentences 8. ;\n            retain total_sentences;\n            set &outputtable.(rename=(_result_Id_=_sentence_id_) drop=_fact_argument_ _fact_ _path_);\n            by &docId. _start_ ;\n\n            if first.&docId. then do;\n               total_sentences = _sentence_id_;\n            end;\n\n            if \"&docId_1_type.\"=\"Numeric\" then do;\n               Obs_ID = compress(put(&docId.,z10.)||\"_\"||put((sum(total_sentences,1)-_sentence_id_),z15.));\n            end;\n            else do;\n               Obs_ID = compress(&docId.||\"_\"||put((sum(total_sentences,1)-_sentence_id_),z15.));\n            end;\n        \n            _sentence_id_ = sum(total_sentences,1)-_sentence_id_;\n\n         run;\n\n      %end;\n   \n   %end;\n\n%mend main_execution_code;\n\n\n/*-----------------------------------------------------------------------------------------*\n   END OF MACROS\n*------------------------------------------------------------------------------------------*/\n\n\n/*-----------------------------------------------------------------------------------------*\n   EXECUTION CODE\n   The execution code is controlled by the trigger variable defined in this custom step. This\n   trigger variable is in an \"enabled\" (value of 1) state by default, but in some cases, as \n   dictated by logic, could be set to a \"disabled\" (value of 0) state.\n*------------------------------------------------------------------------------------------*/\n\n%if &_ss_run_trigger. = 1 %then %do;\n   %main_execution_code;\n%end;\n%if &_ss_run_trigger. = 0 %then %do;\n   %put NOTE: This step has been disabled.  Nothing to do.;\n%end;\n\n/*-----------------------------------------------------------------------------------------*\n   Clean up existing macro variables and macro definitions.\n*------------------------------------------------------------------------------------------*/\n%symdel _ss_error_flag;\n%symdel _ss_run_trigger;\n%symdel casSessionExists;\n%symdel _current_uuid_;\n%symdel _usr_nameCaslib;\n%symdel inputCaslib;\n%symdel outputCaslib;\n\n%sysmacdelete _ss_checkSession;\n%sysmacdelete _usr_getNameCaslib;\n%sysmacdelete _ss_splitter_model;\n%sysmacdelete main_execution_code;"}}